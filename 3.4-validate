#!/bin/bash

##################################
# TODOS
##################################
#
# Scope to make dependency checking stronger (dependencies of other dependencies)
#Â Check non-depends to ensure no duplication of depends.
# Check all arrays aren't duplicating any data.
# VCS source but non-vcs package.
# Full version number in pkgname.
# Non skip for whole repository.
# Default options.
# Use the faillog to explain /why/ URLs are bad.
# May not correctly identify pkgrel dependence.
#
##################################

source config

readonly REGEXVALIDPKGNAME="[0-9a-zA-Z@_+][0-9a-zA-Z@._+-]*"
readonly REGEXVALIDCOMPARATOR="([<>]=?|=)"
readonly REGEXVALIDPKGVER="[^:-]+"
readonly REGEXVALIDPKGREL="[0-9]+"
readonly REGEXVALIDEPOCH="[0-9]+"

inarray() {
	local insensitive=$1 n=$2 h
	shift 2
	$insensitive && shopt -s nocasematch
	for h
	do
		[[ $n = "$h" ]] || continue
		$insensitive && shopt -u nocasematch
		return 0
	done
	shopt -u nocasematch
	return 1
}

insuffixarray() {
	local insensitive=$1 n=$2 h
	shift 2
	$insensitive && shopt -s nocasematch
	for h
	do
		[[ $n = *"$h" ]] || continue
		$insensitive && shopt -u nocasematch
		return 0
	done
	shopt -u nocasematch
	return 1
}

dep_wellformatted() {
	$1 && [[ "$2" =~ ^$REGEXVALIDPKGNAME($REGEXVALIDCOMPARATOR($REGEXVALIDEPOCH:)?$REGEXVALIDPKGVER(-$REGEXVALIDPKGREL)?)?$ ]] && return 0
	! $1 && [[ "$2" =~ ^$REGEXVALIDPKGNAME$ ]] && return 0
	echo "[!!!] Badly formatted package reference.  ($2)" && return 1
}

dep_canbesatisfied() {
	local ABSALLOWAUR=$1; shift 1;
	local OK=false REQDVERSION="${1##*[=><]}"
	if [[ "$REQDVERSION" != "$1" ]]; then
		local PACKAGENAME="${1%%[=><]*}"
		grep -ql "^$PACKAGENAME$" ./"$RESULTDIR"/splitpkgslist && break
		local ALLPKGS=$(grep -h "^$PACKAGENAME=" ./"$RESULTDIR"/tmp_allpkgnames ./"$RESULTDIR"/pkgslist)
		while read line
		do
			local VERCMP=$(vercmp "$REQDVERSION" "${line##*=}")
			{ { [[ "$VERCMP" == 1 ]] && [[ "$1" == *"<"* ]]; } || { [[ "$VERCMP" == 0 ]] && [[ "$1" == *"="* ]]; } || { [[ "$VERCMP" == -1 ]] && [[ "$1" == *">"* ]]; }; } && OK=true && break
		done <<< "$ALLPKGS"
		$OK || { echo "[!!!] Could not find any package that provided $1." && return 1; }
	else
		grep -ql "^$1$\|^$1=" ./"$RESULTDIR"/tmp_allpkgnames ./"$RESULTDIR"/pkgslist ./"$RESULTDIR"/splitpkgslist || { $ABSALLOWAUR && $FROMABS && cower --format "%n=%v" -s "^$1$" >/dev/null 2>&1; } || { echo "[!!!] Could not find any package that provided $1." && return 1; }
	fi
	return 0;
}

dep_notinbasedevel() {
	local PACKAGENAME="${1%%[=><]*}" REQDVERSION="${1##*[=><]}"
	[[ "$REQDVERSION" == "$1" ]] && grep -ql "^$PACKAGENAME$\|^$PACKAGENAME=" ./"$RESULTDIR"/tmp_basedevel && { ! [[ "$ROVERBOSITY" -gt 2 ]] || echo "[!! ] Packages installed by fetching base-devel do not need to be explicitly stated as compilation dependencies.  ($1)"; } && return 1
	[[ "$REQDVERSION" != "$1" ]] && local VERCMP && grep "^$PACKAGENAME=" ./"$RESULTDIR"/tmp_basedevel | sed "s/*=//" | while read line
	do
		VERCMP=$(vercmp "$REQDVERSION" "${line##*=}")
		{ { [[ "$VERCMP" == 1 ]] && [[ "$1" == *"<"* ]]; } || { [[ "$VERCMP" == 0 ]] && [[ "$1" == *"="* ]]; } || { [[ "$VERCMP" == -1 ]] && [[ "$1" == *">"* ]]; }; } && { ! [[ "$ROVERBOSITY" -gt 2 ]] || echo "[!! ] Installing base-devel already satisfies $1."; } && return 1
	done
	return 0
}

dep_nottoolong() {
	[[ "$ROVERBOSITY" -ge 4 ]] && local DESC="${1#*:}" && [[ "$DESC" != "$1" ]] && [[ "${#DESC}" -gt 160 ]] && echo "[   ] Optional dependency description over two terminal lines (160 chars) in length (${#DESC} chars)." && return 1
	return 0
}

validate_vcs_suffix() {
	local SOURCEENTRY PREFIX=false FRAGMENT=true RETURNMSG="" VCSTYPE="${PKGBUILDIDENTIFIER##*-}"
	inarray false "${ROVCSTYPES[$VCSTYPE]}" "${makedepends[@]}" || inarray false "${ROVCSTYPES[$VCSTYPE]}" "${depends[@]}" || RETURNMSG="$RETURNMSG  Missing makedepend on the related VCS package, ${ROVCSTYPES[$VCSTYPE]}."
	for SOURCEENTRY in "${source[@]}"
	do
		SOURCEENTRY="${SOURCEENTRY#*::}"
		{ [[ "$SOURCEENTRY" == "$VCSTYPE://"* ]] || [[ "$SOURCEENTRY" == "$VCSTYPE+"* ]]; } && PREFIX=true && { [[ "${SOURCEENTRY##*#}" == "$SOURCEENTRY" ]] || { [[ "${SOURCEENTRY##*#}" != "revision="* ]] && [[ "${SOURCEENTRY##*#}" != "tag="* ]]; }; } && FRAGMENT=false; ! $FRAGMENT && $PREFIX && break
	done
	! $PREFIX && RETURNMSG="$RETURNMSG  No entry in the source array matched the VCS type specified."
	$PREFIX && $FRAGMENT && RETURNMSG="$RETURNMSG  The only VCS sources mentioned refer to a single revision, so do not make this a VCS package."
	[[ "$RETURNMSG" != "" ]] && echo "[!! ] Bad VCS package:$RETURNMSG"
}

validate_pkgname() {
	local NAME && for NAME in "${pkgname[@]}" "${pkgbase[@]}"
	do
		[[ "$NAME" =~ ^$REGEXVALIDPKGNAME$ ]] || echo "[!!!] Package name contains characters outside the permitted range.  ($NAME)"
	done
	[[ "$ROVERBOSITY" -ge 2 ]] && $VCSPKG && validate_vcs_suffix
	if [[ "$ROVERBOSITY" -ge 3 ]]; then
		! $FROMABS && [[ "$ARCHIVENAME" != "$INNERFOLDER" ]] && echo "[!  ] The archive name, $ARCHIVENAME, does not match the folder inside the archive, $INNERFOLDER."
		[[ "$ARCHIVENAME" != "$PKGBUILDIDENTIFIER" ]] && echo "[!  ] The archive name, $ARCHIVENAME, does not match the package's name, $PKGBUILDIDENTIFIER."
	fi
}

validate_pkgver() {
	[[ "$pkgver" =~ ^$REGEXVALIDPKGVER$ ]] || echo "[!!!] Disallowed pkgver format.  ($pkgver)";
}

validate_pkgrel() {
	[[ "$ROVERBOSITY" -ge 3 ]] && { [[ "$pkgrel" =~ ^$REGEXVALIDPKGREL$ ]] || echo "[!  ] Non-integer or negative pkgrel.  ($pkgrel)"; }
}

validate_pkgdesc() {
	shopt -s nocasematch
	[[ "$ROVERBOSITY" -ge 3 ]] && [[ "$pkgdesc" =~ (^|[^a-zA-Z])"$PKGBUILDIDENTIFIER"([^a-zA-Z]|$) ]] && echo "[!  ] The pkgdesc contains the package name, which should be avoided. ($PKGBUILDIDENTIFIER)"
	[[ "$ROVERBOSITY" -ge 3 ]] && $VCSPKG && [[ "$pkgdesc" =~ (^|[^a-zA-Z0-9])"$VCSLESSPKGBUILDIDENTIFIER"([^a-zA-Z0-9]|$) ]] && echo "[!  ] The pkgdesc contains the package name (after the VCS suffix is removed), which should be avoided. ($VCSLESSPKGBUILDIDENTIFIER)"
	shopt -u nocasematch
	[[ "$ROVERBOSITY" -ge 4 ]] && [[ ${#pkgdesc} -gt 80 ]] && echo "[   ] The pkgdesc is greater than an 80 character standard terminal line. (${#pkgdesc} chars)"
}

validate_url() {
	[[ "$ROVERBOSITY" -ge 3 ]] && grep -qxFf <(echo "$url" | sed "\|://|!d;s|/$||") "./$RESULTDIR/urllist" && echo "[!  ] The provided upstream URL appeared unresponsive.  ($url)"
}

validate_arch() {
	local ARCHITECTURENAME OFFICIALARCH=false ANYEXCESS=false && for ARCHITECTURENAME in "${arch[@]}"
	do
		[[ "$ARCHITECTURENAME" == "any" ]] && OFFICIALARCH=true && { [[ ${#arch[@]} == 1 ]] || ANYEXCESS=true; } && break
		inarray false "$ARCHITECTURENAME" "${ROOFFICIALARCHES[@]}" && OFFICIALARCH=true && continue
		inarray false "$ARCHITECTURENAME" "${ROOTHERARCHES[@]}" && continue
		echo "[!!!] Architecture not recognised.  ($ARCHITECTURENAME)"
	done
	[[ "$ROVERBOSITY" -ge 2 ]] && $ANYEXCESS && echo "[!! ] Architecture 'any' was declared, but was not the only architecture in the array."
	[[ "$ROVERBOSITY" -ge 4 ]] && ! $OFFICIALARCH && OLDIFS="$IFS" && IFS="," && echo "[   ] None of Arch's official architectures (${ROOFFICIALARCHES[*]}) were used.  (${arch[*]})" && IFS="$OLDIFS"
}

validate_license() {
	[[ "$ROVERBOSITY" -ge 2 ]] && local LICENSENAME && for LICENSENAME in "${license[@]}"
	do
		if [[ "$LICENSENAME" == "unknown" ]]; then [[ "$ROVERBOSITY" -ge 3 ]] && echo "[!  ] License name 'unknown' provided.  Please attempt to identify actual license."; continue; fi 
		[[ "$LICENSENAME" == "custom" ]] || { [[ "$LICENSENAME" == "custom:"?* ]] && { ! inarray true "${LICENSENAME#custom:}" "${ROVALIDILICENSES[@]}" && ! inarray false "${LICENSENAME#custom:}" "${ROVALIDLICENSES[@]}"; }; } || inarray true "$LICENSENAME" "${ROVALIDILICENSES[@]}" || inarray false "$LICENSENAME" "${ROVALIDLICENSES[@]}" || echo "[!!!] Bad license name.  ($LICENSENAME)"
	done
}

validate_pkgdir() {
	[[ "$pkgdir" != "" ]] && echo "[!!!] Sets pkgdir.  (To $pkgdir)"
}

validate_srcdir() {
	[[ "$srcdir" != "" ]] && echo "[!!!] Sets srcdir.  (To $srcdir)"
}

validate_startdir() {
	[[ "$startdir" != "" ]] && echo "[!!!] Sets startdir.  (To $startdir)"
}

validate_epoch() {
	[[ "$ROVERBOSITY" -ge 3 ]] && { [[ "$epoch" =~ ^$REGEXVALIDEPOCH$ ]] || echo "[!  ] Non-integer or negative epoch.  ($epoch)"; }
}

validate_pkgbase() {
	return # Handled by pkgname where needed.
}

validate_groups() {
	return # Technically, AUR packages don't get anything for doing this, but it could go in a repo where this might be of use.
}

validate_install() {
	[[ $install != "" ]] && [ ! -f "./$DLDIR/$EXTDIR/$ARCHIVENAME/$INNERFOLDER/$install" ] && echo "[!!!] Specified install file not found in archive.  ($install)"
}

validate_changelog() {
	[[ "$changelog" != "" ]] && [ ! -f "./$DLDIR/$EXTDIR/$ARCHIVENAME/$INNERFOLDER/$changelog" ] && "[!!!] Specified changelog file not found in archive.  ($changelog)"
}

validate_depends() {
	local DEPENDENCYLINE && for DEPENDENCYLINE in "${depends[@]}"
	do
		dep_wellformatted true "$DEPENDENCYLINE" && dep_canbesatisfied false "$DEPENDENCYLINE"
	done
}

validate_makedepends() {
	local DEPENDENCYLINE && for DEPENDENCYLINE in "${makedepends[@]}"
	do
		dep_wellformatted true "$DEPENDENCYLINE" && dep_notinbasedevel "$DEPENDENCYLINE" && dep_canbesatisfied false "$DEPENDENCYLINE"
	done
}

validate_checkdepends() {
	[[ "${#checkdepends[@]}" != 0 ]] && ! declare -p pkgbuildfunction_check >/dev/null 2>&1 && echo "[!!!] Contains checkdepends but no check function." && return
	local DEPENDENCYLINE && for DEPENDENCYLINE in "${checkdepends[@]}"
	do
		dep_wellformatted true "$DEPENDENCYLINE" && dep_notinbasedevel "$DEPENDENCYLINE" && dep_canbesatisfied false "$DEPENDENCYLINE"
	done
}

validate_optdepends() {
	[[ "$ROVERBOSITY" -ge 3 ]] && local DEPENDENCYLINE && for DEPENDENCYLINE in "${optdepends[@]}"
	do
		dep_wellformatted false "${DEPENDENCYLINE%%:[^:]*}" && dep_notinbasedevel "${DEPENDENCYLINE%%:[^:]*}" && dep_canbesatisfied true "${DEPENDENCYLINE%%:[^:]*}" && [[ "$ROVERBOSITY" -ge 80 ]] && dep_nottoolong "$DEPENDENCYLINE"
	done
}

validate_conflicts() {
	local DEPENDENCYLINE && for DEPENDENCYLINE in "${conflicts[@]}"
	do
		dep_wellformatted true "$DEPENDENCYLINE" && local PKGBUILDIDENTIFIERS && for PKGBUILDIDENTIFIERS in "${pkgname[@]}"
		do
			[[ "${DEPENDENCYLINE%%[=<>]*}" == "$PKGBUILDIDENTIFIERS" ]] && echo "[!!!] Conflicts with itself.  ($PKGBUILDIDENTIFIERS)"
		done
	done
}

validate_replaces() {
	local DEPENDENCYLINE && for DEPENDENCYLINE in "${replaces[@]}"
	do
		dep_wellformatted true "$DEPENDENCYLINE" && local PKGBUILDIDENTIFIERS && for PKGBUILDIDENTIFIERS in "${pkgname[@]}"
		do
			[[ "${DEPENDENCYLINE%%[=<>]*}" == "$PKGBUILDIDENTIFIERS" ]] && echo "[!!!] Replaces itself.  ($PKGBUILDIDENTIFIERS)"
		done
	done
}

validate_provides() {
	local PROVIDEDPACKAGE && for PROVIDEDPACKAGE in "${provides[@]}"
	do
		[[ "$PROVIDEDPACKAGE" =~ ^$REGEXVALIDPKGNAME(=($REGEXVALIDEPOCH:)?$REGEXVALIDPKGVER(-$REGEXVALIDPKGREL)?)?$ ]] || { echo "[!!!] Invalid provides declaration ($PROVIDEDPACKAGE)" && continue; }
		[[ "$ROVERBOSITY" -ge 2 ]] && local PKGBUILDIDENTIFIERS && for PKGBUILDIDENTIFIERS in "${pkgname[@]}"
		do
			[[ "${PROVIDEDPACKAGE%%=*}" == "$PKGBUILDIDENTIFIERS" ]] && echo "[!! ] Provides itself.  ($PKGBUILDIDENTIFIERS)"
		done
	done
}

validate_backup() {
	local BACKUPFILE && for BACKUPFILE in "${backup[@]}"
	do
		[[ "$BACKUPFILE" == "/"* ]] && echo "[!!!] Absolute filepaths found in backup array." && break
	done
}

validate_options() {
	local OPTIONNAME && for OPTIONNAME in "${options[@]}"
	do
		{ [[ $OPTIONNAME == "" ]] || inarray false "${OPTIONNAME#!}" "${ROVALIDOPTIONS[@]}"; } || echo "[!!!] Unrecognised option in options array.  ($OPTIONNAME)"
	done
}

validate_source() {
	[[ "${#source[@]}" == 0 ]] && echo "[!!!] Package has zero sources." && return 
	local SUMNAME SOURCEPATH URLLIST=() COMPARETO LOCALINSTALL=false && for SOURCEKEY in "${!source[@]}"
	do
		SOURCEPATH="${source[$SOURCEKEY]}"
		[[ "$SOURCEPATH" == *"://"* ]] && URLLIST+=("$SOURCEPATH") && continue
		if [[ -f "./$DLDIR/$EXTDIR/$ARCHIVENAME/$INNERFOLDER/$SOURCEPATH" ]]; then
			local SUMNAME
			for SUMNAME in "${ROSUMNAMES[@]}"
			do
				local ANALYSEHASH="$SUMNAME""s[$SOURCEKEY]" #md5sums, but program is md5sum.
				ANALYSEHASH="${!ANALYSEHASH}"
				{ [[ "$ANALYSEHASH" == "SKIP" ]] || [[ "$ANALYSEHASH" == "" ]]; } && continue
				[[ "$ROVERBOSITY" -ge 3 ]] && { [[ "$SOURCEPATH" == *".asc" ]] || [[ "$SOURCEPATH" == *".sig" ]]; } && echo "[!  ] Signature files need no corresponding hash.  ($SOURCEPATH)"
				"$SUMNAME" --status -c 2>/dev/null <(echo "$ANALYSEHASH ./$DLDIR/$EXTDIR/$ARCHIVENAME/$INNERFOLDER/$SOURCEPATH") || echo "[!!!] Hash of $SOURCEPATH didn't match expected value."
			done
			[[ "$ROVERBOSITY" -ge 2 ]] && [[ "$SOURCEPATH" == "$install" ]] && [[ "$install" != "" ]] && echo "[!! ] Install file should not be declared in the source array."
			[[ "$ROVERBOSITY" -ge 2 ]] && [[ "$SOURCEPATH" == "$changelog" ]] && [[ "$changelog" != "" ]] && echo "[!! ] Changelog file should not be declared in the source array."
		else
			[[ "$ROVERBOSITY" -ge 3 ]] && echo "[!  ] Source entry $SOURCEPATH not found in the archive (may be legitimate and require local installation, or may be missing files)."
			LOCALINSTALL=true
		fi
	done
	[[ "$ROVERBOSITY" -ge 3 ]] && ! $LOCALINSTALL && [[ "${#URLLIST[@]}" == 0 ]] && echo "[!  ] Package only uses files from the source archive (may be legitimate, but may be bundling binaries or a trivial package)." && return 
	COMPARETO=$(IFS=$'\n'; grep -Fxf <(echo "${URLLIST[*]}" | sed "s|::|\n|;s|^.*\n||;s|/$||") "./$RESULTDIR/urllist"); [[ "$COMPARETO" != "" ]] && echo "[!!!] The following source URLs appeared unresponsive:" && echo "$COMPARETO"
}

validate_noextract() {
	[[ "$ROVERBOSITY" -ge 2 ]] && local NOEXTRACTFILE SOURCEFILE FOUND && for NOEXTRACTFILE in "${noextract[@]}"
	do
		FOUND=false
		for SOURCEFILE in "${source[@]}"
		do
			SOURCEFILE="${SOURCEFILE%%::*}"
			SOURCEFILE="${SOURCEFILE##*/}"
			[[ "$SOURCEFILE" == "$NOEXTRACTFILE" ]] && FOUND=true && break
		done
		$FOUND || echo "[!! ] Told not to extract a file, $NOEXTRACTFILE, that was never specified in the source array."
	done
}

validate_anysums() {
	local TMP1="$1[@]"
	[[ "$2" == 0 ]] && return
	if [[ "$2" == "${#source[@]}" ]]; then
		local SUM
		for SUM in "${!TMP1}"
		do
			[[ "$SUM" == "SKIP" ]] || [[ "$SUM" =~ ^[0-9a-fA-F]{"$3"}$ ]] || echo "[!!!] Malformed checksum in $1.  ($SUM)"
		done
	else
		echo "[!!!] The $1 array is a different length ($2) to the source array (${#source[@]})."
	fi
}

validate_md5sums() {
	validate_anysums "md5sums" "${#md5sums[@]}" 32
}

validate_sha1sums() {
	validate_anysums "sha1sums" "${#sha1sums[@]}" 40
}

validate_sha256sums() {
	validate_anysums "sha256sums" "${#sha256sums[@]}" 64
}

validate_sha384sums() {
	validate_anysums "sha384sums" "${#sha384sums[@]}" 96
}

validate_sha512sums() {
	validate_anysums "sha512sums" "${#sha512sums[@]}" 128
}

validate_ARCHIVENAME() {
	return # pkgname handles this.
}

validate_INNERFOLDER() {
	return # pkgname handles this.
}

validate_STDOUT() {
	[[ "$ROVERBOSITY" -ge 2 ]] && echo "[!! ] Wrote to stdout during sourcing:" && echo "$STDOUT"
}

validate_STDERR() {
	echo "[!!!] Wrote to stderr during sourcing:" && echo "$STDERR"
}

validate_PKGEXT() {
	insuffixarray false "$PKGEXT" "${ROVALIDPKGEXTS[@]}" || echo "[!!!] Unknown forced PKGEXT value.  ($PKGEXT)"
}

validate_CARCH() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Changes CARCH.  ($CARCH)"
}

validate_CFLAGS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set CFLAGS.  ($CFLAGS)"
}

validate_CHOST() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Changes CHOST.  ($CHOST)"
}

validate_CPPFLAGS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set CPPFLAGS.  ($CPPFLAGS)"
}

validate_CXXFLAGS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set CXXFLAGS.  ($CXXFLAGS)"
}

validate_DEBUG_CFLAGS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set DEBUG_CFLAGS.  ($DEBUG_CFLAGS)"
}

validate_DEBUG_CXXFLAGS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set DEBUG_CXXFLAGS.  ($DEBUG_CXXFLAGS)"
}

validate_LDFLAGS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set LDFLAGS.  ($LDFLAGS)"
}

validate_MAKEFLAGS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set MAKEFLAGS.  ($MAKEFLAGS)"
}

validate_MAKEOPTS() {
	[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Modifies user-set MAKEOPTS.  ($MAKEOPTS)"
}

validate_DLAGENTS() {
	local DLAGENT && for DLAGENT in "${DLAGENTS[@]}"
	do
		DLAGENT="${DLAGENT%%::*}"
		inarray false "$DLAGENT" "${RODEFAULTDLAGENTS[@]}" && echo "[!!!] Redefines default DLAGENT for $DLAGENT." || { [[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] The defined DLAGENT, $DLAGENT, will need manual verification of its functionality."; }
	done
}

validate_archivefiles() {
	$FROMABS && local TARGET=0 || local TARGET=1
	local NUMDIRS=$(find ./$DLDIR/$EXTDIR/$ARCHIVENAME/ -mindepth 1 -maxdepth 1 -type d | wc -l)
	[[ "$NUMDIRS" != "$TARGET" ]] && echo "[!!!] Mismatch in expected number of directories in the root working directory.  Found $NUMDIRS instead of $TARGET."
	pushd "./$DLDIR/$EXTDIR/$ARCHIVENAME/$INNERFOLDER" >/dev/null
	
	while read line
	do
		line="${line#./}"
		if { [[ "$line" != "PKGBUILD" ]] && ! inarray false "$line" "${source[@]}" && [[ "$line" != "$install" ]] && [[ "$line" != "$changelog" ]]; }; then
			if $ISSPLIT; then
				shopt -s nocasematch
				if { [[ "$ROVERBOSITY" -ge 2 ]] && [[ "$line" != *"install"* ]] && [[ "$line" != *"change"* ]]; }; then
					echo "[!! ] Directory contains file that is not a source, and does not appear to be named as though it is a split package's install or changelog file.  ($line)"
				else
					[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] Directory contains file that appears to be a split package's install or changelog, however manual checking is needed.  ($line)" 
				fi
				shopt -u nocasematch
			else
				echo "[!!!] Directory contains file not mentioned in PKGBUILD source/install/changelog variables.  ($line)"
			fi
		fi
	done < <(find . -type f)
	popd >/dev/null
}

validate_disgustingstrings() {
	FUNCTIONCONTENT="${!1}"
	[[ "$1" == "pkgbuildfunction_build" ]] && [[ "$FUNCTIONCONTENT" =~ (\\$|\\{)pkgdir([^A-Za-z0-9_]|$) ]] && echo "[!!!] Cannot use pkgdir in build()."
	[[ "$FUNCTIONCONTENT" =~ ($'\n'|$'\t'|$'\v'|$'\f'|$'\r'| |\||\;)sudo($'\n'|$'\t'|$'\v'|$'\f'|$'\r'| ) ]] && echo "[!!!] Found using sudo within ${1#pkgbuildfunction_}()."		
	[[ "$FUNCTIONCONTENT" =~ (\$|\{)startdir([^A-Za-z0-9_]|$) ]] && echo "[!!!] Appears to rely on startdir, which is deprecated, in ${1#pkgbuildfunction_}()."
	[[ "$FUNCTIONCONTENT" =~ (\$|\{)(srcdir|pkgdir)/\.\.([^A-Za-z0-9_]|$) ]] && echo "[!!!] Appears to traverse up a directory from the srcdir or pkgdir, in ${1#pkgbuildfunction_}()."
	[[ "$ROVERBOSITY" -ge 2 ]] && local N=$'\n' && [[ "${FUNCTIONCONTENT//$N/ }" =~ \|\|($'\n'|$'\t'|$'\v'|$'\f'|$'\r'| )*return ]] && echo "[!! ] Found using '|| return' within ${1#pkgbuildfunction_}()."
	# FIXME: False positive if sed-ing. (, |, whitespace are acceptable. ${CARCH#...?
	# [[ "$ROVERBOSITY" -ge 4 ]] && [[ "$FUNCTIONCONTENT" =~ ([^A-Za-z0-9_]|^)(CARCH|CFLAGS|CHOST|CPPFLAGS|CXXFLAGS|DEBUG_CFLAGS|DEBUG_CXXFLAGS|LDFLAGS|MAKEFLAGS|MAKEOPTS)+?= ]] && echo "[   ] Found setting one of the many sets of build flags.  Check if it is still needed in ${1#pkgbuildfunction_}()."
}

validate_varsandfuncs() {
	local HASPACKAGE=false HASBUILD=false HASPKGVER=false
	ISSPLIT=false
	ALLSETVARS=($(sed "/^_/d;s/=.*//" "$PACKAGE"))
	for SETVARIABLE in "${ALLSETVARS[@]}"
	do
		if [[ "$SETVARIABLE" =~ ^pkgbuildfunction_ ]]; then
			validate_disgustingstrings "$SETVARIABLE"
			[[ "$SETVARIABLE" == "pkgbuildfunction_package" ]] && HASPACKAGE=true && continue
			[[ "$SETVARIABLE" == "pkgbuildfunction_package_"* ]] && HASPACKAGE=true && ISSPLIT=true && continue
			[[ "$SETVARIABLE" == "pkgbuildfunction_build" ]] && HASBUILD=true && continue
			[[ "$SETVARIABLE" == "pkgbuildfunction_pkgver" ]] && HASPKGVER=true && continue
			if [[ "$ROVERBOSITY" -ge 4 ]]; then
				local ACTUALFUNCTION="${SETVARIABLE#pkgbuildfunction_}"
				inarray false "$ACTUALFUNCTION" "${RONONSPECIALFUNCTIONS[@]}" || echo "[   ] PKGBUILD contains non-standard function $ACTUALFUNCTION().  This may be intentional."
			fi
		elif [[ "$ROVERBOSITY" -ge 2 ]]; then
			[[ "$SETVARIABLE" =~ -+ ]] && continue
			inarray false "$SETVARIABLE" "${ROALLPKGFIELDS[@]}" || echo "[!! ] All non-standard variable names should be prefixed with an underscore to avoid makepkg conflicts.  ($SETVARIABLE)"
		fi
	done
	! $HASPACKAGE && $HASBUILD && echo "[!!!] Packages that have build() but no package() are deprecated."
	[[ "$ROVERBOSITY" -ge 3 ]] && $HASPKGVER && ! $VCSPKG && echo "[!  ] This is not a VCS package, but it uses pkgver()."
	[[ "$ROVERBOSITY" -ge 3 ]] && ! $HASPKGVER && $VCSPKG && echo "[!  ] This is a VCS package, but it does not use pkgver()."
	[[ "$ROVERBOSITY" -ge 2 ]] && local SHEBANG && read -rn 2 SHEBANG < <(cat "./$DLDIR/$EXTDIR/$ARCHIVENAME/$INNERFOLDER/PKGBUILD") && [[ "$SHEBANG" == "#!" ]] && echo "[!! ] PKGBUILDs should not begin with a shebang.  They will be sourced, not executed."

}

FROMABS=false
while getopts "a" OPTION; do
	case "$OPTION" in
		a)
			FROMABS=true
			shift 1
			;;
	esac	
done

VERBOSITY="$1"
shift 1
read -a INPUT <<< "$@"
for PACKAGE in "${INPUT[@]}"
do
	FILENAME="${PACKAGE##*/}"
	APPLICABLEARCHES="${FILENAME##*-}"

	RESULT=$(
		readonly ROOFFICIALARCHES=(any x86_64 i686)
		readonly ROOTHERARCHES=(arm armv6h armv7h)
		readonly ROVALIDOPTIONS=(strip docs libtool staticlibs emptydirs zipman purge upx debug ccache distcc buildflags makeflags)
		readonly ROVALIDILICENSES=(AGPL AGPL3 Artistic2.0 CCPL:by CCPL:by-nc CCPL:by-nc-nd CCPL:by-nc-sa CCPL:by-nd CCPL:by-sa CDDL CPL EPL FDL FDL1.2 FDL1.3 GPL GPL2 GPL3 LGPL LGPL2.1 LGPL3 LPPL MPL PerlArtistic PHP PSF RUBY W3C ZPL zsync BSD MIT Python ZLIB unknown)
		readonly ROVALIDLICENSES=(Apache APACHE)
		readonly ROVALIDPKGEXTS=(tar.gz tar.bz2 tar.xz tar.lrz tar.lzo tar.Z tar)
		readonly RONONSPECIALFUNCTIONS=(prepare check)
		readonly ROSPLITREDEF=(pkgver pkgrel epoch pkgdesc arch url license groups depends optdepends provides conflicts replaces backup options install changelog)
		readonly RODEFAULTDLAGENTS=(http https ftp rsync scp)
		readonly ROSUMNAMES=(md5sum sha1sum sha256sum sha384sum sha512sum)
		declare -Ar ROVCSTYPES=([svn]=subversion [bzr]=bzr [git]=git [hg]=mercurial)
		# End of array markers below for iteration assistance.
		ROALLPKGFIELDS=(pkgname) # Special case.  Required string-or-array.
		ROALLPKGFIELDS+=(pkgdesc pkgrel pkgver url -) # REQUIRED STRINGS
		ROALLPKGFIELDS+=(arch license --) # REQUIRED ARRAYS
		ROALLPKGFIELDS+=(changelog epoch install pkgbase pkgdir srcdir startdir PKGEXT MAKEFLAGS MAKEOPTS DEBUG_CFLAGS DEBUG_CXXFLAGS CARCH LDFLAGS CFLAGS CPPFLAGS CXXFLAGS CHOST STDOUT STDERR ARCHIVENAME INNERFOLDER ---) # OTHER STRINGS
		ROALLPKGFIELDS+=(backup checkdepends conflicts depends groups makedepends md5sums noextract optdepends options provides replaces sha1sums sha256sums sha384sums sha512sums source DLAGENTS) # OTHER ARRAYS
		readonly ROALLPKGFIELDS

		readonly ROVERBOSITY="$VERBOSITY"

		source "$PACKAGE" 2>/dev/null
		
		PKGBUILDIDENTIFIER=$({ [[ "${#pkgname[*]}" -gt 1 ]] && [[ "$pkgbase" != "" ]] && echo "$pkgbase"; } || echo "$pkgname")
		if $FROMABS; then
			# Look up pkgname[0] so split packages get a result (mapping is resultant pkg -> maintainer name, not from splitpkg name instead)
			PKGOWNER=$(awk '$1 == "'"$pkgname"'" {for (i=2; i<NF; i++) printf $i " "; print $NF}' $RESULTDIR/pkgowners)
			PKGREPO=$(awk '$1 == "'"$pkgname"'" {print $2}' $RESULTDIR/pkgrepos)
			grep -ql $'\r' <(declare -p) && echo ">>> $ARCHIVENAME ($APPLICABLEARCHES, $PKGOWNER)" && echo "[!!!] The PKGBUILD in this archive contained CRLF line endings, which makepkg will refuse to source.  Aborted." && exit
			echo ">>> $PKGBUILDIDENTIFIER ($APPLICABLEARCHES, $PKGREPO, $PKGOWNER)"
		else
			PKGOWNER=$(awk '$1 == "'"$ARCHIVENAME"'" { print $2 }' $RESULTDIR/pkgowners)
			PKGVOTES=$(awk '$1 == "'"$ARCHIVENAME"'" { if ($2 == 1 ) { print $2 " vote" } else print $2 " votes" }' $RESULTDIR/pkgvotes)
			PKGOOD=$(awk '$1 == "'"$ARCHIVENAME"'" { if ($2 == "yes") print ", flagged" }' $RESULTDIR/pkgood)
			grep -ql $'\r' <(declare -p) && echo ">>> $ARCHIVENAME ($APPLICABLEARCHES, $PKGOWNER, $PKGVOTES$PKGOOD)" && echo "[!!!] The PKGBUILD in this archive contained CRLF line endings, which makepkg will refuse to source.  Aborted." && exit
			echo ">>> $PKGBUILDIDENTIFIER ($APPLICABLEARCHES, $PKGOWNER, $PKGVOTES$PKGOOD)"
		fi

		VCSPKG=false
		inarray false "${PKGBUILDIDENTIFIER##*-}" "${!ROVCSTYPES[@]}" && VCSPKG=true && VCSLESSPKGBUILDIDENTIFIER="${PKGBUILDIDENTIFIER%-*}"

		validate_varsandfuncs

		REQUIREDFIELD=true
		ISSTRING=true
		NUMSUMS=0
		NUMSUMTYPES=0
		for PKGBUILDFIELD in "${ROALLPKGFIELDS[@]}"
		do
			$REQUIREDFIELD && [[ "$PKGBUILDFIELD" == "-" ]] && ISSTRING=false && continue
			$REQUIREDFIELD && [[ "$PKGBUILDFIELD" == "--" ]] && REQUIREDFIELD=false && ISSTRING=true && continue
			[[ "$PKGBUILDFIELD" == "---" ]] && ISSTRING=false && continue
			VARIABLETYPE=$(declare -p "$PKGBUILDFIELD" 2>/dev/null | head -n 1 | cut -d " " -f 2)
			if [[ "$VARIABLETYPE" == "" ]] && $REQUIREDFIELD; then
				if $ISSPLIT; then
					[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] This splitpkg does not mention $PKGBUILDFIELD at the top level.  Please check it exists in all package_*() functions."
				else
					echo "[!!!] The essential variable '$PKGBUILDFIELD' has been omitted."
				fi
			fi
			[[ "$VARIABLETYPE" == "" ]] && continue
			ACTUALLYSTRING=false
			[[ "$VARIABLETYPE" =~ ^[^Aa]+$ ]] && ACTUALLYSTRING=true
			
			if [[ "$PKGBUILDFIELD" != "pkgname" ]]; then
				if { $ISSTRING && ! $ACTUALLYSTRING; }; then 
					echo "[!!!] Expected $PKGBUILDFIELD to be a string, was an array.  Converting and attempting tests anyway."
					TMP="$PKGBUILDFIELD""[*]"
					TMP="${!TMP}"
					unset $PKGBUILDFIELD
					eval "$PKGBUILDFIELD='$TMP'"
				elif { ! $ISSTRING && $ACTUALLYSTRING; }; then
					echo "[!!!] Expected $PKGBUILDFIELD to be an array, was a string.  Converting and attempting tests anyway."
					eval "$PKGBUILDFIELD=('${!PKGBUILDFIELD}')"
				fi
			fi

			SKIPVALIDATION=false
			COMPARETO=""
			if $ACTUALLYSTRING; then
				COMPARETO="${!PKGBUILDFIELD}"
			else
				TMPVAR="$PKGBUILDFIELD""[@]"
				COMPARETO="${!TMPVAR}"
			fi

			if [[ "$COMPARETO" == "" ]]; then
				if { $ISSPLIT && inarray false "${PKGBUILDFIELD}" "${!ROSPLITREDEF[@]}"; }; then
					[[ "$ROVERBOSITY" -ge 4 ]] && echo "[   ] The split PKGBUILD declares $PKGBUILDFIELD empty on the root level.  Please manually check the validity of the values set."
					SKIPVALIDATION=true
				else
					if $REQUIREDFIELD; then
						echo "[!!!] Required variable '$PKGBUILDFIELD' has been set, but is empty."
					else
						[[ "$ROVERBOSITY" -ge 3 ]] && echo "[!  ] Variable '$PKGBUILDFIELD' has been set, but is empty."
					fi
				fi
			fi

			$SKIPVALIDATION || validate_$PKGBUILDFIELD
		done

		validate_archivefiles

		exit 0
	)
	[[ $? == 1 ]] && RESULT="Aborting: Could not load data, likely due to use of an associative array."
	
	[[ "$RESULT" == *$'\n'* ]] && echo "$RESULT" && echo
done