#!/bin/bash

source config

prep() {
	if [[ ! -d ./"$RESULTDIR"/sourced ]]; then
		bsdtar -C ./res -xzf ./"$RESULTDIR"/sourceall.tar.gz
	fi
}

coalesce() {
	if [[ -f ./"$RESULTDIR"/goodurls ]]; then
		comm -23 <(sort ./"$RESULTDIR"/urllist) <(sort ./"$RESULTDIR"/goodurls) | sponge ./"$RESULTDIR"/urllist
		rm ./"$RESULTDIR"/goodurls
	fi
}

urlcheck() {
	SHELL=/usr/bin/bash parallel -N 50 -j 50 './3.3-urlcheck "{}"' :::: ./"$RESULTDIR"/urllist >./"$RESULTDIR"/goodurls 2>./"$RESULTDIR"/faillog
}

genreport() {
	FROMABS=false
	[[ -f "$RESULTDIR"/fromabs ]] && [[ ! -s "$RESULTDIR"/fromabs ]] && FROMABS=true

	cat <<REPORTHEADER
Each package was sourced in a container with only base and base-devel, with a read-only working directory and no network connection.  This is intentional, since the act of sourcing should not be writing files, downloading files, or using anything that cannot be checked against the dependency array by makepkg first.
This may mean that some instances of a message such as 'wrote to stdout' or 'wrote to stderr' are not where the PKGBUILD actively uses a msg-like function, but where it attempts to download or write a file to disk.

REPORTHEADER
	
	if ! $FROMABS; then
		echo "==========================================================[Extraction]"
		cat "$RESULTDIR"/extractbugs

		if [[ "$VERBOSITY" -ge 2 ]]; then
			echo
			echo "========================================[Executable files in archive]"
			if [[ "$VERBOSITY" -ge 4 ]]; then
				cat "$RESULTDIR"/executablebugs
			else
				sed 's|[^ ]* ./||;s|/|\n|; s|\n.*||' "./$RESULTDIR/executablebugs" | sort | uniq
			fi
		fi
	fi

	echo
	echo "================================[PKGBUILDs too many directories deep]"
	pushd ./"$DLDIR"/"$EXTDIR"/ >/dev/null
	$FROMABS && MINDEPTH=3 || MINDEPTH=4
	find . -mindepth "$MINDEPTH" -type f -name PKGBUILD
	popd >/dev/null

	echo
	echo "====================================[PKGBUILDs unable to be analysed]"
	pushd ./"$RESULTDIR"/temporary >/dev/null

	if [[ "$VERBOSITY" -ge 3 ]]; then
		for j in $(
			for i in *
			do
				[[ -e "$i" ]] || continue
				$FROMABS && echo "${i%-*-*}" || echo "${i%%-*}"
			done | uniq)
		do
			$FROMABS && echo "$j" || echo "${j%%---*}:"
			for k in "$j-"*
			do
				[[ -e "$k" ]] || continue
				TMP="${k%-*}"
				echo "===== ${k##*-} (${TMP##*-}) ====="
				cat "$k"
			done
			echo
		done
	else
		for i in *
		do
			[[ -e "$i" ]] || continue
			$FROMABS && echo "${i%-*-*}" || echo "${i%%---*}"
		done | uniq 
	fi
	popd >/dev/null

	echo
	echo "=================================================[Main package faults]"
	expac -Sg '%n' base-devel | SHELL=/usr/bin/bash parallel -j8 'pactree -sl {}' | awk 'BEGIN{RS=ORS="\n"}!a[$1]++ {print $1}' | SHELL=/usr/bin/bash parallel -j8 'expac -S1 "%n=%v  %P" {} | sed "s/  /\n/g" | grep -v "\.so=\|\.so$\|^$"' | awk 'BEGIN{RS=ORS="\n"}!a[$0]++' > ./"$RESULTDIR"/tmp_basedevel
	expac -S "%n=%v  %P" | sed 's/  /\n/g' > ./"$RESULTDIR"/tmp_allpkgnames
	$FROMABS && touch ./"$RESULTDIR"/pkgslist && touch ./"$RESULTDIR"/splitpkgslist
	PKGLIST=$(find ./"$RESULTDIR"/sourced -type f)
	! $ALLPKGS && PKGSEL=$(grep -Po "^[^ ]*(?= $MAINTAINERNAME$)" ./"$RESULTDIR"/pkgowners) && PKGLIST=$(grep -f <(echo "$PKGSEL") <(echo "$PKGLIST"))
	
	OPTS=""
	$FROMABS && OPTS="-a"
	sort <<< "$PKGLIST" | SHELL=/usr/bin/bash parallel -k -N 25 -j8 './3.4-validate '"$OPTS $VERBOSITY"' {}' | tee /tmp/errors-"$MAINTAINERNAME$VERBOSITY$OPTS"
	if $SEPARATEFILES; then
		if $ALLPKGS; then
			rm -r "/tmp/permaintainerlogs$VERBOSITY$OPTS"
			mkdir "/tmp/permaintainerlogs$VERBOSITY$OPTS"
			awk 'BEGIN{RS=ORS="\n"}!a[$2]++ {print $2}' ./"$RESULTDIR"/pkgowners | SHELL=/usr/bin/bash parallel -j8 "awk '/, {}(,|\))/,/^$/' '/tmp/errors-$VERBOSITY$OPTS' >'/tmp/permaintainerlogs$VERBOSITY$OPTS/{}'"
			find "/tmp/permaintainerlogs$VERBOSITY$OPTS" -type f -empty -delete
		else
			echo "==============[Logs for $MAINTAINERNAME only begin here]=============="
			awk '/, '"$MAINTAINERNAME"'(,|\))/,/^$/' /tmp/errors-"$MAINTAINERNAME$VERBOSITY$OPTS" | tee /tmp/logsfor"$MAINTAINERNAME"
		fi
	fi

	rm ./"$RESULTDIR"/{tmp_basedevel,tmp_allpkgnames}
}

VERBOSITY=0
ALLPKGS=true
SEPARATEFILES=false
while getopts "m:sv" OPTION; do
	case "$OPTION" in
		m)
			MAINTAINERNAME="$OPTARG"
			ALLPKGS=false
			SEPARATEFILES=true
			;;
		s)
			SEPARATEFILES=true
			;;
		v)
			VERBOSITY=$((VERBOSITY+1))
			;;
	esac	
done
[[ "$VERBOSITY" == "0" ]] && VERBOSITY=1


#prep
#urlcheck
#coalesce
#urlcheck
#coalesce
#urlcheck
#coalesce
genreport