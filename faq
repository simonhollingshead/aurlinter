KNOWN BUGS, FIXED FOR NEXT RUN:

- Blank variables could cause two messages if both the blank check and analysis stage identified the empty string.  This still exists in the next run in certain situations (Empty source array is an 'empty array' issue, but is also a 'this package has no sources' error, which is required since the initial detection is -vvv, but the source validity check is -v).
- There was no clear indication of message severity.  Worst severity bugs are those that stop generation of a pkg.tar.gz file, or will when a deprecated element is finally removed.
- Metadata for some packages was wrong in the case where a pkgname did not match the archive name.
- Logs didn't contain any messages about CRLF PKGBUILDs.
- Split PKGBUILDs may contain excessive messages about mmissing variables that are actually set in the package_* functions.
- PKGBUILDs with no build() do not need a package(), but the analysis phase was not aware of this.

KNOWN UNFIXED BUGS:

- bzr+lp: URLs are considered invalid because the URL tester only runs over '://' containing URLs right now.

QUESTIONS:

Why does my report say a package source is down?  It's up!  I can see it is!

In order to validate a URL, it is fetched multiple times over a day or two.  If it happens that the server suffers downtime exactly when the checks take place, it will be miscategorised.  Currently, it is also the case that URL patterns that have to have their own DLAGENT are considered to always fail.  This will be resolved.

--

What do messages like "Architecture not recognised.  (i686 x86_64)" or "Bad dependency.  ()" mean?

If you are providing an array of elements, each element is tested in turn.  In the first example, 'i686 x86_64' is not an architecture.  The fact this ever worked in makepkg was a bug due to missing quotation marks, and was corrected in pacman's git repository, commit b82a0d83, on Oct 31.  In the latter case, the issue is explictly stating a dependency on the empty string, rather than not making any dependencies.  Since no package has a package name of the empty string, this /technically/ cannot be resolved.

--

Why does my package show twice with the same errors, one as (i686) and once as (x86_64)?

If your PKGBUILD has any variables set specially based on the CARCH, then it goes through the report generator once per CARCH, otherwise one analysis phase called 'allarches' occurs.  As it currently stands, there is no aggregation step if the issues in the package are identical regardless of CARCH.

--

I disowned or adopted a package, why isn't it listed as belonging to me?

The snapshot not only fetches the packages at that point in time, but associates the maintainer name, flagged/unflagged status and vote count at that point.  Changes made to PKGBUILDs, ownership, or changing the flag state on a package will not be recognised until the AUR packages are re-fetched.
